/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { FeeVault, FeeVaultInterface } from "../FeeVault";

const _abi = [
  {
    type: "function",
    name: "acceptOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "depositOpenChannelFee",
    inputs: [
      {
        name: "src",
        type: "address",
        internalType: "address",
      },
      {
        name: "version",
        type: "string",
        internalType: "string",
      },
      {
        name: "ordering",
        type: "uint8",
        internalType: "enum ChannelOrder",
      },
      {
        name: "connectionHops",
        type: "string[]",
        internalType: "string[]",
      },
      {
        name: "counterpartyPortId",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "depositSendPacketFee",
    inputs: [
      {
        name: "channelId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "sequence",
        type: "uint64",
        internalType: "uint64",
      },
      {
        name: "gasLimits",
        type: "uint256[2]",
        internalType: "uint256[2]",
      },
      {
        name: "gasPrices",
        type: "uint256[2]",
        internalType: "uint256[2]",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pendingOwner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "renounceOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "withdrawFeesToOwner",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "OpenChannelFeeDeposited",
    inputs: [
      {
        name: "sourceAddress",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "version",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "ordering",
        type: "uint8",
        indexed: false,
        internalType: "enum ChannelOrder",
      },
      {
        name: "connectionHops",
        type: "string[]",
        indexed: false,
        internalType: "string[]",
      },
      {
        name: "counterpartyPortId",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "feeAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferStarted",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "SendPacketFeeDeposited",
    inputs: [
      {
        name: "channelId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "sequence",
        type: "uint64",
        indexed: true,
        internalType: "uint64",
      },
      {
        name: "gasLimits",
        type: "uint256[2]",
        indexed: false,
        internalType: "uint256[2]",
      },
      {
        name: "gasPrices",
        type: "uint256[2]",
        indexed: false,
        internalType: "uint256[2]",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "IncorrectFeeSent",
    inputs: [
      {
        name: "expected",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "sent",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "NoFeeSent",
    inputs: [],
  },
  {
    type: "error",
    name: "SenderNotDispatcher",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a33610024565b600160025561009b565b600180546001600160a01b03191690556100488161004b602090811b6103cd17901c565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61099c806100aa6000396000f3fe60806040526004361061007b5760003560e01c80638da5cb5b1161004e5780638da5cb5b146100d4578063e30c39781461010a578063f2fde38b14610128578063fce34e401461014857600080fd5b80630be6a22d1461008057806318e3404b14610097578063715018a6146100aa57806379ba5097146100bf575b600080fd5b34801561008c57600080fd5b5061009561015b565b005b6100956100a53660046104fe565b610198565b3480156100b657600080fd5b50610095610250565b3480156100cb57600080fd5b50610095610264565b3480156100e057600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b34801561011657600080fd5b506001546001600160a01b03166100ee565b34801561013457600080fd5b50610095610143366004610578565b6102db565b61009561015636600461064d565b61034c565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f19350505050158015610195573d6000803e3d6000fd5b50565b6101a061041d565b60006101b46020808401359085013561078b565b6101c08335853561078b565b6101ca91906107aa565b90503481146101fa57604051635c6dd11360e11b8152600481018290523460248201526044015b60405180910390fd5b8367ffffffffffffffff16857f0733dc80f277e205edf5d913fa5d91fa0c4cc2635db600b365471c688356c03485856040516102379291906107c2565b60405180910390a35061024a6001600255565b50505050565b610258610474565b61026260006104ce565b565b60015433906001600160a01b031681146102d25760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016101f1565b610195816104ce565b6102e3610474565b600180546001600160a01b0383166001600160a01b031990911681179091556103146000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b61035461041d565b3460000361037557604051633d28b18360e11b815260040160405180910390fd5b7f8ab5595b5ac9231b64513ba86f6bd9fb73c51cae40c36083f7dfc2298e4429e687878787878787346040516103b29897969594939291906108bb565b60405180910390a16103c46001600255565b50505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600280540361046e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101f1565b60028055565b6000546001600160a01b031633146102625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101f1565b600180546001600160a01b0319169055610195816103cd565b80604081018310156104f857600080fd5b92915050565b60008060008060c0858703121561051457600080fd5b84359350602085013567ffffffffffffffff8116811461053357600080fd5b925061054286604087016104e7565b915061055186608087016104e7565b905092959194509250565b80356001600160a01b038116811461057357600080fd5b919050565b60006020828403121561058a57600080fd5b6105938261055c565b9392505050565b634e487b7160e01b600052604160045260246000fd5b80356003811061057357600080fd5b60008083601f8401126105d157600080fd5b50813567ffffffffffffffff8111156105e957600080fd5b6020830191508360208260051b850101111561060457600080fd5b9250929050565b60008083601f84011261061d57600080fd5b50813567ffffffffffffffff81111561063557600080fd5b60208301915083602082850101111561060457600080fd5b600080600080600080600060a0888a03121561066857600080fd5b6106718861055c565b9650602088013567ffffffffffffffff8082111561068e57600080fd5b818a0191508a601f8301126106a257600080fd5b8135818111156106b4576106b461059a565b604051601f8201601f19908116603f011681019083821181831017156106dc576106dc61059a565b816040528281528d60208487010111156106f557600080fd5b82602086016020830137600060208483010152809a5050505061071a60408b016105b0565b965060608a013591508082111561073057600080fd5b61073c8b838c016105bf565b909650945060808a013591508082111561075557600080fd5b506107628a828b0161060b565b989b979a50959850939692959293505050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156107a5576107a5610775565b500290565b600082198211156107bd576107bd610775565b500190565b6080810160408483376040836040840137600081529392505050565b600381106107fc57634e487b7160e01b600052602160045260246000fd5b9052565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b81835260006020808501808196508560051b810191508460005b878110156108ae5782840389528135601e1988360301811261086457600080fd5b8701858101903567ffffffffffffffff81111561088057600080fd5b80360382131561088f57600080fd5b61089a868284610800565b9a87019a9550505090840190600101610843565b5091979650505050505050565b60018060a01b03891681526000602060c08184015289518060c085015260005b818110156108f7578b810183015185820160e0015282016108db565b8181111561090957600060e083870101525b50601f01601f191683019050610922604084018a6107de565b60e083820301606084015261093b60e08201888a610829565b90508281036080840152610950818688610800565b9150508260a0830152999850505050505050505056fea26469706673582212203615a76c8a35a4670d87a0877ae4eed27c3346a0defbe5b8a2a02264206146c264736f6c634300080f0033";

type FeeVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FeeVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FeeVault__factory extends ContractFactory {
  constructor(...args: FeeVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      FeeVault & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FeeVault__factory {
    return super.connect(runner) as FeeVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeeVaultInterface {
    return new Interface(_abi) as FeeVaultInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): FeeVault {
    return new Contract(address, _abi, runner) as unknown as FeeVault;
  }
}
