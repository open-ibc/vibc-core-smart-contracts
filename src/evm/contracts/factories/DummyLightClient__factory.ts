/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  DummyLightClient,
  DummyLightClientInterface,
} from "../DummyLightClient";

const _abi = [
  {
    type: "constructor",
    inputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getLightClientType",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "enum LightClientType",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "getState",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "appHash",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "updateClient",
    inputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "verifyMembership",
    inputs: [
      {
        name: "proof",
        type: "tuple",
        internalType: "struct Ics23Proof",
        components: [
          {
            name: "proof",
            type: "tuple[]",
            internalType: "struct OpIcs23Proof[]",
            components: [
              {
                name: "path",
                type: "tuple[]",
                internalType: "struct OpIcs23ProofPath[]",
                components: [
                  {
                    name: "prefix",
                    type: "bytes",
                    internalType: "bytes",
                  },
                  {
                    name: "suffix",
                    type: "bytes",
                    internalType: "bytes",
                  },
                ],
              },
              {
                name: "key",
                type: "bytes",
                internalType: "bytes",
              },
              {
                name: "value",
                type: "bytes",
                internalType: "bytes",
              },
              {
                name: "prefix",
                type: "bytes",
                internalType: "bytes",
              },
            ],
          },
          {
            name: "height",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "verifyNonMembership",
    inputs: [
      {
        name: "proof",
        type: "tuple",
        internalType: "struct Ics23Proof",
        components: [
          {
            name: "proof",
            type: "tuple[]",
            internalType: "struct OpIcs23Proof[]",
            components: [
              {
                name: "path",
                type: "tuple[]",
                internalType: "struct OpIcs23ProofPath[]",
                components: [
                  {
                    name: "prefix",
                    type: "bytes",
                    internalType: "bytes",
                  },
                  {
                    name: "suffix",
                    type: "bytes",
                    internalType: "bytes",
                  },
                ],
              },
              {
                name: "key",
                type: "bytes",
                internalType: "bytes",
              },
              {
                name: "value",
                type: "bytes",
                internalType: "bytes",
              },
              {
                name: "prefix",
                type: "bytes",
                internalType: "bytes",
              },
            ],
          },
          {
            name: "height",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "error",
    name: "InvalidDummyMembershipProof",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidDummyNonMembershipProof",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506103c2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806336028d2a1461005c57806344c9af281461007457806349ff245e14610096578063cb535ab5146100ac578063fdaab4e5146100bf575b600080fd5b600060405161006b9190610125565b60405180910390f35b61008861008236600461014d565b50600090565b60405190815260200161006b565b6100aa6100a4366004610166565b50505050565b005b6100aa6100ba3660046102a0565b6100d2565b6100aa6100cd366004610328565b6100fc565b82602001356000036100f757604051636cb681eb60e01b815260040160405180910390fd5b505050565b816020013560000361012157604051631e76ddb960e21b815260040160405180910390fd5b5050565b602081016003831061014757634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561015f57600080fd5b5035919050565b6000806000806060858703121561017c57600080fd5b843567ffffffffffffffff8082111561019457600080fd5b818701915087601f8301126101a857600080fd5b8135818111156101b757600080fd5b8860208285010111156101c957600080fd5b6020928301999098509187013596604001359550909350505050565b6000604082840312156101f757600080fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261022457600080fd5b813567ffffffffffffffff8082111561023f5761023f6101fd565b604051601f8301601f19908116603f01168101908282118183101715610267576102676101fd565b8160405283815286602085880101111561028057600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156102b557600080fd5b833567ffffffffffffffff808211156102cd57600080fd5b6102d9878388016101e5565b945060208601359150808211156102ef57600080fd5b6102fb87838801610213565b9350604086013591508082111561031157600080fd5b5061031e86828701610213565b9150509250925092565b6000806040838503121561033b57600080fd5b823567ffffffffffffffff8082111561035357600080fd5b61035f868387016101e5565b9350602085013591508082111561037557600080fd5b5061038285828601610213565b915050925092905056fea264697066735822122087d0888dcb3e174d64f252c95f4a7d78979d8120d253505a5bb305fa1dcbcebf64736f6c634300080f0033";

type DummyLightClientConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DummyLightClientConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DummyLightClient__factory extends ContractFactory {
  constructor(...args: DummyLightClientConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DummyLightClient & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DummyLightClient__factory {
    return super.connect(runner) as DummyLightClient__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DummyLightClientInterface {
    return new Interface(_abi) as DummyLightClientInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DummyLightClient {
    return new Contract(address, _abi, runner) as unknown as DummyLightClient;
  }
}
