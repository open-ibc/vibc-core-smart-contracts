/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  SequencerSignatureVerifier,
  SequencerSignatureVerifierInterface,
} from "../SequencerSignatureVerifier";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "sequencer_",
        type: "address",
        internalType: "address",
      },
      {
        name: "chainId_",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "CHAIN_ID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "SEQUENCER",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "verifyMembership",
    inputs: [
      {
        name: "appHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "key",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "value",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "proofs",
        type: "tuple",
        internalType: "struct Ics23Proof",
        components: [
          {
            name: "proof",
            type: "tuple[]",
            internalType: "struct OpIcs23Proof[]",
            components: [
              {
                name: "path",
                type: "tuple[]",
                internalType: "struct OpIcs23ProofPath[]",
                components: [
                  {
                    name: "prefix",
                    type: "bytes",
                    internalType: "bytes",
                  },
                  {
                    name: "suffix",
                    type: "bytes",
                    internalType: "bytes",
                  },
                ],
              },
              {
                name: "key",
                type: "bytes",
                internalType: "bytes",
              },
              {
                name: "value",
                type: "bytes",
                internalType: "bytes",
              },
              {
                name: "prefix",
                type: "bytes",
                internalType: "bytes",
              },
            ],
          },
          {
            name: "height",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "verifyNonMembership",
    inputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct Ics23Proof",
        components: [
          {
            name: "proof",
            type: "tuple[]",
            internalType: "struct OpIcs23Proof[]",
            components: [
              {
                name: "path",
                type: "tuple[]",
                internalType: "struct OpIcs23ProofPath[]",
                components: [
                  {
                    name: "prefix",
                    type: "bytes",
                    internalType: "bytes",
                  },
                  {
                    name: "suffix",
                    type: "bytes",
                    internalType: "bytes",
                  },
                ],
              },
              {
                name: "key",
                type: "bytes",
                internalType: "bytes",
              },
              {
                name: "value",
                type: "bytes",
                internalType: "bytes",
              },
              {
                name: "prefix",
                type: "bytes",
                internalType: "bytes",
              },
            ],
          },
          {
            name: "height",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "verifyStateUpdate",
    inputs: [
      {
        name: "l2BlockNumber",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "appHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "l1BlockHash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "signature",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "view",
  },
  {
    type: "error",
    name: "InvalidAppHash",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidIbcStateProof",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidL1BlockHash",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidL1BlockNumber",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidPacketProof",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidProofKey",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidProofValue",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidRLPEncodedL1BlockNumber",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidRLPEncodedL1StateRoot",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidSequencerSignature",
    inputs: [],
  },
  {
    type: "error",
    name: "MethodNotImplemented",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051610e97380380610e9783398101604081905261002f91610045565b6001600160a01b0390911660805260a05261007f565b6000806040838503121561005857600080fd5b82516001600160a01b038116811461006f57600080fd5b6020939093015192949293505050565b60805160a051610de76100b06000396000818160ba0152610562015260008181607601526105cc0152610de76000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632a6ded741461005c57806375fd4ca91461007157806385e1f4d0146100b5578063c2f0329f146100ea578063e8d90039146100fd575b600080fd5b61006f61006a366004610981565b610110565b005b6100987f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100dc7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100ac565b61006f6100f8366004610a97565b610129565b61006f61010b366004610b10565b6102f1565b604051632974974360e01b815260040160405180910390fd5b6101338180610b71565b600081811061014457610144610bbb565b90506020028101906101569190610bd1565b610164906020810190610bf1565b604051610172929190610c38565b60405180910390208380519060200120146101a05760405163026a287560e51b815260040160405180910390fd5b6101aa8180610b71565b60008181106101bb576101bb610bbb565b90506020028101906101cd9190610bd1565b6101db906040810190610bf1565b6040516101e9929190610c38565b6040518091039020828051906020012014610217576040516310d9300f60e11b815260040160405180910390fd5b61024c6102248280610b71565b600081811061023557610235610bbb565b90506020028101906102479190610bd1565b610305565b6102568280610b71565b600181811061026757610267610bbb565b90506020028101906102799190610bd1565b610287906040810190610bf1565b61029091610c48565b146102ae57604051636589f0e160e11b815260040160405180910390fd5b6102cc6102bb8280610b71565b600181811061023557610235610bbb565b84146102eb576040516392cb8fbb60e01b815260040160405180910390fd5b50505050565b6102fe8585858585610529565b5050505050565b60008060026103176040850185610bf1565b604051610325929190610c38565b602060405180830381855afa158015610342573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906103659190610c66565b905060026103766060850185610bf1565b61038d6103866020880188610bf1565b9050610637565b61039a6020880188610bf1565b6103a46020610637565b876040516020016103bb9796959493929190610cba565b60408051601f19818403018152908290526103d591610cfe565b602060405180830381855afa1580156103f2573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906104159190610c66565b915060005b6104248480610b71565b90508110156105225760026104398580610b71565b8381811061044957610449610bbb565b905060200281019061045b9190610d11565b6104659080610bf1565b856104708880610b71565b8681811061048057610480610bbb565b90506020028101906104929190610d11565b6104a0906020810190610bf1565b6040516020016104b4959493929190610d27565b60408051601f19818403018152908290526104ce91610cfe565b602060405180830381855afa1580156104eb573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061050e9190610c66565b92508061051a81610d4f565b91505061041a565b5050919050565b604080516020808201889052818301879052606080830187905283518084039091018152608083018452805190820120600060a08401527f000000000000000000000000000000000000000000000000000000000000000060c084015260e080840191909152835180840390910181526101008301808552815191830191909120601f860183900490920283016101209081019094528481526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169361061093879187918291018382808284376000920191909152506106a692505050565b6001600160a01b0316146102fe576040516339e27c8560e21b815260040160405180910390fd5b6060805b60808310610679578083607f1660801760f81b60405160200161065f929190610d76565b60408051601f198184030190525260079290921c9161063b565b808360f81b60405160200161068f929190610d76565b604051602081830303815290604052915050919050565b60008060006106b585856106cc565b915091506106c281610711565b5090505b92915050565b60008082516041036107025760208301516040840151606085015160001a6106f687828585610863565b9450945050505061070a565b506000905060025b9250929050565b600081600481111561072557610725610d9b565b0361072d5750565b600181600481111561074157610741610d9b565b036107935760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064015b60405180910390fd5b60028160048111156107a7576107a7610d9b565b036107f45760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161078a565b600381600481111561080857610808610d9b565b036108605760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161078a565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561089a575060009050600361091e565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156108ee573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166109175760006001925092505061091e565b9150600090505b94509492505050565b60008083601f84011261093957600080fd5b50813567ffffffffffffffff81111561095157600080fd5b60208301915083602082850101111561070a57600080fd5b60006040828403121561097b57600080fd5b50919050565b6000806000806060858703121561099757600080fd5b84359350602085013567ffffffffffffffff808211156109b657600080fd5b6109c288838901610927565b909550935060408701359150808211156109db57600080fd5b506109e887828801610969565b91505092959194509250565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610a1b57600080fd5b813567ffffffffffffffff80821115610a3657610a366109f4565b604051601f8301601f19908116603f01168101908282118183101715610a5e57610a5e6109f4565b81604052838152866020858801011115610a7757600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215610aad57600080fd5b84359350602085013567ffffffffffffffff80821115610acc57600080fd5b610ad888838901610a0a565b94506040870135915080821115610aee57600080fd5b610afa88838901610a0a565b935060608701359150808211156109db57600080fd5b600080600080600060808688031215610b2857600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff811115610b5457600080fd5b610b6088828901610927565b969995985093965092949392505050565b6000808335601e19843603018112610b8857600080fd5b83018035915067ffffffffffffffff821115610ba357600080fd5b6020019150600581901b360382131561070a57600080fd5b634e487b7160e01b600052603260045260246000fd5b60008235607e19833603018112610be757600080fd5b9190910192915050565b6000808335601e19843603018112610c0857600080fd5b83018035915067ffffffffffffffff821115610c2357600080fd5b60200191503681900382131561070a57600080fd5b8183823760009101908152919050565b803560208310156106c657600019602084900360031b1b1692915050565b600060208284031215610c7857600080fd5b5051919050565b6000815160005b81811015610ca05760208185018101518683015201610c86565b81811115610caf576000828601525b509290920192915050565b86888237600087820160008152610cd18189610c7f565b9050858782376000908601908152610ce98186610c7f565b93845250506020909101979650505050505050565b6000610d0a8284610c7f565b9392505050565b60008235603e19833603018112610be757600080fd5b8486823760008582018581528385602083013760009301602001928352509095945050505050565b600060018201610d6f57634e487b7160e01b600052601160045260246000fd5b5060010190565b6000610d828285610c7f565b6001600160f81b03199390931683525050600101919050565b634e487b7160e01b600052602160045260246000fdfea26469706673582212204c92df476c295d7ae35dea3637cddf13ac44da4b35b87bc3ab88c3db6aef94bf64736f6c634300080f0033";

type SequencerSignatureVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SequencerSignatureVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SequencerSignatureVerifier__factory extends ContractFactory {
  constructor(...args: SequencerSignatureVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    sequencer_: AddressLike,
    chainId_: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(sequencer_, chainId_, overrides || {});
  }
  override deploy(
    sequencer_: AddressLike,
    chainId_: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(sequencer_, chainId_, overrides || {}) as Promise<
      SequencerSignatureVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): SequencerSignatureVerifier__factory {
    return super.connect(runner) as SequencerSignatureVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SequencerSignatureVerifierInterface {
    return new Interface(_abi) as SequencerSignatureVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SequencerSignatureVerifier {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as SequencerSignatureVerifier;
  }
}
