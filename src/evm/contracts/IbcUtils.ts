/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type UniversalPacketStruct = {
  srcPortAddr: BytesLike;
  mwBitmap: BigNumberish;
  destPortAddr: BytesLike;
  appData: BytesLike;
};

export type UniversalPacketStructOutput = [
  srcPortAddr: string,
  mwBitmap: bigint,
  destPortAddr: string,
  appData: string
] & {
  srcPortAddr: string;
  mwBitmap: bigint;
  destPortAddr: string;
  appData: string;
};

export interface IbcUtilsInterface extends Interface {
  getFunction(
    nameOrSignature: "fromUniversalPacketBytes" | "hexStrToAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fromUniversalPacketBytes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hexStrToAddress",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "fromUniversalPacketBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hexStrToAddress",
    data: BytesLike
  ): Result;
}

export interface IbcUtils extends BaseContract {
  connect(runner?: ContractRunner | null): IbcUtils;
  waitForDeployment(): Promise<this>;

  interface: IbcUtilsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  fromUniversalPacketBytes: TypedContractMethod<
    [data: BytesLike],
    [UniversalPacketStructOutput],
    "view"
  >;

  hexStrToAddress: TypedContractMethod<[hexStr: string], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "fromUniversalPacketBytes"
  ): TypedContractMethod<
    [data: BytesLike],
    [UniversalPacketStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hexStrToAddress"
  ): TypedContractMethod<[hexStr: string], [string], "view">;

  filters: {};
}
