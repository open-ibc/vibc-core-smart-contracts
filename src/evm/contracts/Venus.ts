/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VenusInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "counterParty"
      | "lastReceivedTransmission"
      | "prover"
      | "receiveEvent"
      | "receiveReceipt"
      | "receiveTransmissionEvent"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "SuccessfulEvent"
      | "SuccessfulReceipt"
      | "TransmissionReceived"
      | "TransmitToHouston"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "counterParty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastReceivedTransmission",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "prover", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveEvent",
    values: [BytesLike, BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveReceipt",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveTransmissionEvent",
    values: [BytesLike, BytesLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "counterParty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastReceivedTransmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prover", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveTransmissionEvent",
    data: BytesLike
  ): Result;
}

export namespace SuccessfulEventEvent {
  export type InputTuple = [eventIndex: BigNumberish, sender: AddressLike];
  export type OutputTuple = [eventIndex: bigint, sender: string];
  export interface OutputObject {
    eventIndex: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuccessfulReceiptEvent {
  export type InputTuple = [receiptIndex: BytesLike, receiptRLP: BytesLike];
  export type OutputTuple = [receiptIndex: string, receiptRLP: string];
  export interface OutputObject {
    receiptIndex: string;
    receiptRLP: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransmissionReceivedEvent {
  export type InputTuple = [message: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [message: string, timestamp: bigint];
  export interface OutputObject {
    message: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransmitToHoustonEvent {
  export type InputTuple = [message: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [message: string, timestamp: bigint];
  export interface OutputObject {
    message: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Venus extends BaseContract {
  connect(runner?: ContractRunner | null): Venus;
  waitForDeployment(): Promise<this>;

  interface: VenusInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  counterParty: TypedContractMethod<[], [string], "view">;

  lastReceivedTransmission: TypedContractMethod<[], [string], "view">;

  prover: TypedContractMethod<[], [string], "view">;

  receiveEvent: TypedContractMethod<
    [
      receiptIndex: BytesLike,
      receiptRLPEncodedBytes: BytesLike,
      logIndex: BigNumberish,
      logBytes: BytesLike,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  receiveReceipt: TypedContractMethod<
    [
      receiptIndex: BytesLike,
      receiptRLPEncodedBytes: BytesLike,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  receiveTransmissionEvent: TypedContractMethod<
    [
      receiptIndex: BytesLike,
      receiptRLPEncodedBytes: BytesLike,
      logIndex: BigNumberish,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "counterParty"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lastReceivedTransmission"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "prover"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveEvent"
  ): TypedContractMethod<
    [
      receiptIndex: BytesLike,
      receiptRLPEncodedBytes: BytesLike,
      logIndex: BigNumberish,
      logBytes: BytesLike,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiveReceipt"
  ): TypedContractMethod<
    [
      receiptIndex: BytesLike,
      receiptRLPEncodedBytes: BytesLike,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiveTransmissionEvent"
  ): TypedContractMethod<
    [
      receiptIndex: BytesLike,
      receiptRLPEncodedBytes: BytesLike,
      logIndex: BigNumberish,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "SuccessfulEvent"
  ): TypedContractEvent<
    SuccessfulEventEvent.InputTuple,
    SuccessfulEventEvent.OutputTuple,
    SuccessfulEventEvent.OutputObject
  >;
  getEvent(
    key: "SuccessfulReceipt"
  ): TypedContractEvent<
    SuccessfulReceiptEvent.InputTuple,
    SuccessfulReceiptEvent.OutputTuple,
    SuccessfulReceiptEvent.OutputObject
  >;
  getEvent(
    key: "TransmissionReceived"
  ): TypedContractEvent<
    TransmissionReceivedEvent.InputTuple,
    TransmissionReceivedEvent.OutputTuple,
    TransmissionReceivedEvent.OutputObject
  >;
  getEvent(
    key: "TransmitToHouston"
  ): TypedContractEvent<
    TransmitToHoustonEvent.InputTuple,
    TransmitToHoustonEvent.OutputTuple,
    TransmitToHoustonEvent.OutputObject
  >;

  filters: {
    "SuccessfulEvent(uint256,address)": TypedContractEvent<
      SuccessfulEventEvent.InputTuple,
      SuccessfulEventEvent.OutputTuple,
      SuccessfulEventEvent.OutputObject
    >;
    SuccessfulEvent: TypedContractEvent<
      SuccessfulEventEvent.InputTuple,
      SuccessfulEventEvent.OutputTuple,
      SuccessfulEventEvent.OutputObject
    >;

    "SuccessfulReceipt(bytes,bytes)": TypedContractEvent<
      SuccessfulReceiptEvent.InputTuple,
      SuccessfulReceiptEvent.OutputTuple,
      SuccessfulReceiptEvent.OutputObject
    >;
    SuccessfulReceipt: TypedContractEvent<
      SuccessfulReceiptEvent.InputTuple,
      SuccessfulReceiptEvent.OutputTuple,
      SuccessfulReceiptEvent.OutputObject
    >;

    "TransmissionReceived(bytes32,uint64)": TypedContractEvent<
      TransmissionReceivedEvent.InputTuple,
      TransmissionReceivedEvent.OutputTuple,
      TransmissionReceivedEvent.OutputObject
    >;
    TransmissionReceived: TypedContractEvent<
      TransmissionReceivedEvent.InputTuple,
      TransmissionReceivedEvent.OutputTuple,
      TransmissionReceivedEvent.OutputObject
    >;

    "TransmitToHouston(bytes32,uint64)": TypedContractEvent<
      TransmitToHoustonEvent.InputTuple,
      TransmitToHoustonEvent.OutputTuple,
      TransmitToHoustonEvent.OutputObject
    >;
    TransmitToHouston: TypedContractEvent<
      TransmitToHoustonEvent.InputTuple,
      TransmitToHoustonEvent.OutputTuple,
      TransmitToHoustonEvent.OutputObject
    >;
  };
}
