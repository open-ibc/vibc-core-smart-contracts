/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type OpIcs23ProofPathStruct = { prefix: BytesLike; suffix: BytesLike };

export type OpIcs23ProofPathStructOutput = [prefix: string, suffix: string] & {
  prefix: string;
  suffix: string;
};

export type OpIcs23ProofStruct = {
  path: OpIcs23ProofPathStruct[];
  key: BytesLike;
  value: BytesLike;
  prefix: BytesLike;
};

export type OpIcs23ProofStructOutput = [
  path: OpIcs23ProofPathStructOutput[],
  key: string,
  value: string,
  prefix: string
] & {
  path: OpIcs23ProofPathStructOutput[];
  key: string;
  value: string;
  prefix: string;
};

export type Ics23ProofStruct = {
  proof: OpIcs23ProofStruct[];
  height: BigNumberish;
};

export type Ics23ProofStructOutput = [
  proof: OpIcs23ProofStructOutput[],
  height: bigint
] & { proof: OpIcs23ProofStructOutput[]; height: bigint };

export interface OptimisticLightClientInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "consensusStates"
      | "fraudProofEndtime"
      | "fraudProofWindowSeconds"
      | "getFraudProofEndtime"
      | "getInternalState"
      | "getState"
      | "l1BlockProvider"
      | "updateClient"
      | "verifier"
      | "verifyMembership"
      | "verifyNonMembership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "consensusStates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fraudProofEndtime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fraudProofWindowSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFraudProofEndtime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInternalState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "l1BlockProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateClient",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyMembership",
    values: [Ics23ProofStruct, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyNonMembership",
    values: [Ics23ProofStruct, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "consensusStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fraudProofEndtime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fraudProofWindowSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFraudProofEndtime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInternalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l1BlockProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyNonMembership",
    data: BytesLike
  ): Result;
}

export interface OptimisticLightClient extends BaseContract {
  connect(runner?: ContractRunner | null): OptimisticLightClient;
  waitForDeployment(): Promise<this>;

  interface: OptimisticLightClientInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  consensusStates: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  fraudProofEndtime: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  fraudProofWindowSeconds: TypedContractMethod<[], [bigint], "view">;

  getFraudProofEndtime: TypedContractMethod<
    [height: BigNumberish],
    [bigint],
    "view"
  >;

  getInternalState: TypedContractMethod<
    [height: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        appHash: bigint;
        fraudProofEndTime: bigint;
        ended: boolean;
      }
    ],
    "view"
  >;

  getState: TypedContractMethod<
    [height: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        appHash: bigint;
        fraudProofEndTime: bigint;
        ended: boolean;
      }
    ],
    "view"
  >;

  l1BlockProvider: TypedContractMethod<[], [string], "view">;

  updateClient: TypedContractMethod<
    [
      l1headerbytes: BytesLike,
      proof: BytesLike,
      height: BigNumberish,
      appHash: BigNumberish
    ],
    [[bigint, boolean] & { fraudProofEndTime: bigint; ended: boolean }],
    "nonpayable"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  verifyMembership: TypedContractMethod<
    [proof: Ics23ProofStruct, key: BytesLike, expectedValue: BytesLike],
    [void],
    "view"
  >;

  verifyNonMembership: TypedContractMethod<
    [proof: Ics23ProofStruct, key: BytesLike],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "consensusStates"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "fraudProofEndtime"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "fraudProofWindowSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFraudProofEndtime"
  ): TypedContractMethod<[height: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getInternalState"
  ): TypedContractMethod<
    [height: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        appHash: bigint;
        fraudProofEndTime: bigint;
        ended: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getState"
  ): TypedContractMethod<
    [height: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        appHash: bigint;
        fraudProofEndTime: bigint;
        ended: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "l1BlockProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateClient"
  ): TypedContractMethod<
    [
      l1headerbytes: BytesLike,
      proof: BytesLike,
      height: BigNumberish,
      appHash: BigNumberish
    ],
    [[bigint, boolean] & { fraudProofEndTime: bigint; ended: boolean }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyMembership"
  ): TypedContractMethod<
    [proof: Ics23ProofStruct, key: BytesLike, expectedValue: BytesLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyNonMembership"
  ): TypedContractMethod<
    [proof: Ics23ProofStruct, key: BytesLike],
    [void],
    "view"
  >;

  filters: {};
}
