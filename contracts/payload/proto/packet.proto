syntax = "proto3";
// package ibc.core.channel.v1;

// Height is a monotonically increasing data type
// that can be compared against another Height for the purposes of updating and
// freezing clients
//
// Normally the RevisionHeight is incremented at each height while keeping
// RevisionNumber the same. However some consensus algorithms may choose to
// reset the height in certain conditions e.g. hard forks, state-machine
// breaking changes In these cases, the RevisionNumber is incremented so that
// height continues to be monitonically increasing even as the RevisionHeight
// gets reset
message Height {
    // the revision that the client is currently on
    uint64 revision_number = 1;
    // the height within the given revision
    uint64 revision_height = 2;
  }

// Packet defines a type that carries data across different chains through IBC
message Packet {
  // number corresponds to the order of sends and receives, where a Packet
  // with an earlier sequence number must be sent and received before a Packet
  // with a later sequence number.
  uint64 sequence = 1;
  // identifies the port on the sending chain.
  string source_port = 2 ;
  // identifies the channel end on the sending chain.
  string source_channel = 3 ;
  // identifies the port on the receiving chain.
  string destination_port = 4 ;
  // identifies the channel end on the receiving chain.
  string destination_channel = 5 ;
  // actual opaque bytes transferred directly to the application module
  bytes data = 6;
  // block height after which the packet times out
  Height timeout_height = 7;
  // block timestamp (in nanoseconds) after which the packet times out
  uint64 timeout_timestamp = 8 ;
}