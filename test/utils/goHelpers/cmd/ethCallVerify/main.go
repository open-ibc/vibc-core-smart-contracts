package main

import (
	"bytes"
	"context"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"math/big"
	"net/http"
	"os"
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/core/rawdb"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/ethereum/go-ethereum/trie"
	"github.com/ethereum/go-ethereum/triedb"
	"github.com/open-ibc/vibc-core-smart-contracts/v4/bindings/go/crossl2prover"
	// ""
)

// Define a struct to represent the JSON response
type JSONRPCResponse struct {
	JSONRPC string `json:"jsonrpc"`
	ID      int    `json:"id"`
	Result  struct {
		JobID        int64  `json:"jobID"`
		Proof        string `json:"proof"` // Hex-encoded string
		ReceiptIndex uint32 `json:"receiptIndex"`
		Receipt      string `json:"receipt"` // Hex-encoded RLP string
		Status       string `json:"status"`
	} `json:"result"`
}



func fetchRlpEncodedBytes(receipts types.Receipts, receiptIdx uint64) {
	trieFun := trie.NewEmpty(triedb.NewDatabase(rawdb.NewMemoryDatabase(), nil))
	derivableReceipts := types.Receipts(receipts)
	receiptTrieRoot := types.DeriveSha(derivableReceipts, trieFun)

	// rece

}


func fetchProofFromService(jobId int64) []byte {
	proofServiceUrl := "http://proof.stg.testnet.polymer.zone"
	requestBody := map[string]interface{}{
		"jsonrpc": "2.0",
		"id":      1,
		"method":  "prover_queryReceiptProof",
		"params":  []int64{jobId},
	}
	jsonData, err := json.Marshal(requestBody)
	if err != nil {
		log.Fatalf("Error marshaling JSON: %v", err)
	}

	// Create the HTTP request
	resp, err := http.Post(proofServiceUrl, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		log.Fatalf("Error making HTTP request: %v", err)
	}
	defer resp.Body.Close()

	// Read the response body
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatalf("Error reading response body: %v", err)
	}

	// Print the raw response (for debugging)
	fmt.Println("Raw Response:", string(body))

	// {
	// 	“jsonrpc”: “2.0”,
	// 	“id”:      1,
	// 	"result":  {
	// 		“jobID”:        int64,
	// 		“proof”:        []byte (hex string encoded),
	// 		“receiptIndex”: uint32,
	// 		“receipt”:      []byte (hex string RLP encoded),
	// 		  “status”: “complete” | “error” | “pending”
	// 	}
	//   }

	var response JSONRPCResponse
	err = json.Unmarshal(body, &response)
	if err != nil {
		log.Fatalf("Error unmarshaling JSON response: %v", err)
	}

	// Check for errors in the response
	fmt.Println("JSON-RPC Result:", response.Result)

	decoded, err := hex.DecodeString(response.Result.Proof)

	if err != nil {
		log.Fatalf("error decoding string")
	}
	return decoded

}

func main() {

	lcAddress := "0x27e3f212677884e9D8528C263e2F45F0d6e51134"
	// blockNumber := int64(20221924)
	// receiptIdx := uint64(1)
	// fmt.Println("Proving reciept idx : ", blockNumber)

	rpcUrl := os.Getenv("BASE_SEPOLIA_RPC_URL")
	alchemyRpc, err := ethclient.Dial(rpcUrl)


	// VerifyMembership
	if err != nil {
		fmt.Println("error dialing alchemyRpc: ", err)
		return
	}

	// Replace with your contract ABI (from your contract's ABI file)
	contractABI, err := abi.JSON(strings.NewReader("[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"verifier_\",\"type\":\"address\",\"internalType\":\"contractISignatureVerifier\"},{\"name\":\"peptideClientId_\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"LIGHT_CLIENT_TYPE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"enumLightClientType\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getState\",\"inputs\":[{\"name\":\"height\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"peptideAppHashes\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"peptideClientId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"updateClient\",\"inputs\":[{\"name\":\"proof\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"peptideHeight\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"peptideAppHash\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"validateEvent\",\"inputs\":[{\"name\":\"receiptIndex\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"receiptRLPEncodedBytes\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"logIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"logBytes\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"proof\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"validateReceipt\",\"inputs\":[{\"name\":\"receiptIndex\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"receiptRLPEncodedBytes\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"proof\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"valid\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"verifier\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractISignatureVerifier\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"verifyMembership\",\"inputs\":[{\"name\":\"appHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"key\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"proofs\",\"type\":\"tuple\",\"internalType\":\"structIcs23Proof\",\"components\":[{\"name\":\"proof\",\"type\":\"tuple[]\",\"internalType\":\"structOpIcs23Proof[]\",\"components\":[{\"name\":\"path\",\"type\":\"tuple[]\",\"internalType\":\"structOpIcs23ProofPath[]\",\"components\":[{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"suffix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"key\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"height\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"verifyNonMembership\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIcs23Proof\",\"components\":[{\"name\":\"proof\",\"type\":\"tuple[]\",\"internalType\":\"structOpIcs23Proof[]\",\"components\":[{\"name\":\"path\",\"type\":\"tuple[]\",\"internalType\":\"structOpIcs23ProofPath[]\",\"components\":[{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"suffix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"key\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"height\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"pure\"},{\"type\":\"error\",\"name\":\"CannotUpdateClientWithDifferentAppHash\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidAppHash\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidIbcStateProof\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidL1BlockHash\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidL1BlockNumber\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidPacketProof\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidProofKey\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidProofValue\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidRLPEncodedL1BlockNumber\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidRLPEncodedL1StateRoot\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"MethodNotImplemented\",\"inputs\":[]}]"))
	if err != nil {
		log.Fatalf("Failed to parse contract ABI: %v", err)
	}

	crossl2prover.ValidateReceipt(

	)
	// Replace with the function name and arguments
	functionName := "validateReceipt"
	// 	function validateReceipt(bytes calldata receiptIndex, bytes calldata receiptRLPEncodedBytes, bytes calldata proof)
	// 	public
	// 	view
	// 	returns (bool valid)
	// {

	
	response:= {receipt: "+QT+AYMG7vK5AQAAQAAAAAAAgIAIAAAAAAAAACIQAgAAAAAAEAAAACAAAAAAAAAAAAAAAAAAABAQAAAAAAAAAAAAAAAAAAQAAAgAAAAAAAAAAAAAAAAIAAAgAAAACAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAgIAAAgAAAAAAAABAAAAAACQAAUAAAAAAAAAAAAAAAQAAAAAAAQAAAAAAQAAAAAAIAAIAAAAAEEAAAAAABAAAAIgAAAIAAIACAAAAAAAAAAgAAAAAAAAABACAAAAAAAAAAAAEAAAAEAAAAAAACAAAAAAAAAAAUAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+QPz+JuUuUZ7JBF/151W85atw8zbaV2QWuT4Y6Dd8lKtG+LIm2nCsGj8N42qlSun8WPEoRYo9VpN9SOz76AAAAAAAAAAAAAAAACTnY8J4ALq8X4QrKuAQWS+zluOPKAAAAAAAAAAAAAAAAAyZ+ctyHgKFRL6adp3Wexm8wNQ46AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGhSBcPkBvpTXNe0H8K/UNBVemszrFbDpKLbvP/iEoHafcR0gxnkVPTgiVPWYkmE7WKl8yHaySRNKwlyA+cgUoAAAAAAAAAAAAAAAAK6o5F2rAz3LYfhgqG2M9VaE6pWroAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeegoAAAAAAAAAAAAAAAAK6o5F2rAz3LYfhgqG2M9VaE6pWruQEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzgMAA2WAAKo33AAAAAAAAAAAAAAAAK6o5F2rAz3LYfhgqG2M9VaE6pWrAAHnoAAAAAAAAAAAAAAAAK6o5F2rAz3LYfhgqG2M9VaE6pWrAgAAAAAAAAAAAAAAALlGeyQRf9edVvOWrcPM22ldkFrkAAAAAAAAAAAAAAAAk52PCeAC6vF+EKyrgEFkvs5bjjwAAAAAAAAAAAAAAAApiRDuZxZhNvCMmjAqG0nLMx1N2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaFIFwAAAAAAAAAAAAAAAAAAAAAAAA+FqU1zXtB/Cv1DQVXprM6xWw6Si27z/4QqB4jbwbcVJzIXghDn9NnQEO8Bb56vvmZ4a9cWn1bgw1OqCD3DcfWA//9ykM2dXSSjBJ4SjTyvUWqdOaZdHajAUq3oD4eZRIMeBs+pwzLxkt3HiXaS4vTOhqfuGgJTo6BMq3DUfBUEgJJC2TUM2BYntPHVB1PhWc+M127TO4QIPcNx9YD//3KQzZ1dJKMEnhKNPK9Rap05pl0dqMBSreAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADZYD4vJQyZ+ctyHgKFRL6adp3Wexm8wNQ4/iEoCWMC//CHQJXnrZCT2ZN4FH5rOueaUevCDz+a0wTssKQoAAAAAAAAAAAAAAAALlGeyQRf9edVvOWrcPM22ldkFrkoAAAAAAAAAAAAAAAAJOdjwngAurxfhCsq4BBZL7OW448oAAAAAAAAAAAAAAAACmJEO5nFmE28IyaMCobScszHU3YoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaFIFw",
	proof: "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",
	"receiptIndex": 3,
}
	json.Unmarshal({
    "jsonrpc": "2.0",
    "id": 1,
    "result": {
        "status": "complete",
        "jobID": 15,
        "proof": ,
   
        "receipt": 
    }
})
	// json.Unmarshal()
	functionArgs := []interface{}{"yourArgument1", big.NewInt(123)} // Example arguments

	// Pack the function arguments using the ABI
	packedArgs, err := contractABI.Pack(functionName, functionArgs...)
	if err != nil {
		log.Fatalf("Failed to pack function arguments: %v", err)
	}

	// Fetch proof data from proof api
	fetch

	// Create the call message
	msg := &bind.CallOpts{
		Pending: false, // Use latest block
		Context: context.Background(),
	}

	eth
}


// {
//     "jsonrpc": "2.0",
//     "id": 1,
//     "result": {
//         "status": "complete",
//         "jobID": 15,
//         "proof": "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",
//         "receiptIndex": 3,
//         "receipt": "+QT+AYMG7vK5AQAAQAAAAAAAgIAIAAAAAAAAACIQAgAAAAAAEAAAACAAAAAAAAAAAAAAAAAAABAQAAAAAAAAAAAAAAAAAAQAAAgAAAAAAAAAAAAAAAAIAAAgAAAACAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAgIAAAgAAAAAAAABAAAAAACQAAUAAAAAAAAAAAAAAAQAAAAAAAQAAAAAAQAAAAAAIAAIAAAAAEEAAAAAABAAAAIgAAAIAAIACAAAAAAAAAAgAAAAAAAAABACAAAAAAAAAAAAEAAAAEAAAAAAACAAAAAAAAAAAUAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+QPz+JuUuUZ7JBF/151W85atw8zbaV2QWuT4Y6Dd8lKtG+LIm2nCsGj8N42qlSun8WPEoRYo9VpN9SOz76AAAAAAAAAAAAAAAACTnY8J4ALq8X4QrKuAQWS+zluOPKAAAAAAAAAAAAAAAAAyZ+ctyHgKFRL6adp3Wexm8wNQ46AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGhSBcPkBvpTXNe0H8K/UNBVemszrFbDpKLbvP/iEoHafcR0gxnkVPTgiVPWYkmE7WKl8yHaySRNKwlyA+cgUoAAAAAAAAAAAAAAAAK6o5F2rAz3LYfhgqG2M9VaE6pWroAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeegoAAAAAAAAAAAAAAAAK6o5F2rAz3LYfhgqG2M9VaE6pWruQEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzgMAA2WAAKo33AAAAAAAAAAAAAAAAK6o5F2rAz3LYfhgqG2M9VaE6pWrAAHnoAAAAAAAAAAAAAAAAK6o5F2rAz3LYfhgqG2M9VaE6pWrAgAAAAAAAAAAAAAAALlGeyQRf9edVvOWrcPM22ldkFrkAAAAAAAAAAAAAAAAk52PCeAC6vF+EKyrgEFkvs5bjjwAAAAAAAAAAAAAAAApiRDuZxZhNvCMmjAqG0nLMx1N2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaFIFwAAAAAAAAAAAAAAAAAAAAAAAA+FqU1zXtB/Cv1DQVXprM6xWw6Si27z/4QqB4jbwbcVJzIXghDn9NnQEO8Bb56vvmZ4a9cWn1bgw1OqCD3DcfWA//9ykM2dXSSjBJ4SjTyvUWqdOaZdHajAUq3oD4eZRIMeBs+pwzLxkt3HiXaS4vTOhqfuGgJTo6BMq3DUfBUEgJJC2TUM2BYntPHVB1PhWc+M127TO4QIPcNx9YD//3KQzZ1dJKMEnhKNPK9Rap05pl0dqMBSreAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADZYD4vJQyZ+ctyHgKFRL6adp3Wexm8wNQ4/iEoCWMC//CHQJXnrZCT2ZN4FH5rOueaUevCDz+a0wTssKQoAAAAAAAAAAAAAAAALlGeyQRf9edVvOWrcPM22ldkFrkoAAAAAAAAAAAAAAAAJOdjwngAurxfhCsq4BBZL7OW448oAAAAAAAAAAAAAAAACmJEO5nFmE28IyaMCobScszHU3YoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaFIFw"
//     }
// }

// type{

// }


// func decode(){

// }

// main(){

// }